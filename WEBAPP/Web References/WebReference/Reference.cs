//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18408 版自动生成。
// 
#pragma warning disable 1591

namespace WEBAPP.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IDataService", Namespace="http://tempuri.org/")]
    public partial class DataService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback testOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJsonDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataByConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJsonDataByConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSqlByConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExcelDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCmnetFromExcelOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileAndUpdateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DataService() {
            this.Url = "http://127.0.0.1:4503/DataService/SVC";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event testCompletedEventHandler testCompleted;
        
        /// <remarks/>
        public event GetJsonDataCompletedEventHandler GetJsonDataCompleted;
        
        /// <remarks/>
        public event ExecuteSqlCompletedEventHandler ExecuteSqlCompleted;
        
        /// <remarks/>
        public event GetDataByConfigCompletedEventHandler GetDataByConfigCompleted;
        
        /// <remarks/>
        public event GetJsonDataByConfigCompletedEventHandler GetJsonDataByConfigCompleted;
        
        /// <remarks/>
        public event ExecuteSqlByConfigCompletedEventHandler ExecuteSqlByConfigCompleted;
        
        /// <remarks/>
        public event SendSmsCompletedEventHandler SendSmsCompleted;
        
        /// <remarks/>
        public event GetExcelDataCompletedEventHandler GetExcelDataCompleted;
        
        /// <remarks/>
        public event UploadCmnetFromExcelCompletedEventHandler UploadCmnetFromExcelCompleted;
        
        /// <remarks/>
        public event UploadFileAndUpdateCompletedEventHandler UploadFileAndUpdateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/GetData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfanyTypeanyType", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para) {
            object[] results = this.Invoke("GetData", new object[] {
                        sqlId,
                        para});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para) {
            this.GetDataAsync(sqlId, para, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        sqlId,
                        para}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/test", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string test([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name) {
            object[] results = this.Invoke("test", new object[] {
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void testAsync(string name) {
            this.testAsync(name, null);
        }
        
        /// <remarks/>
        public void testAsync(string name, object userState) {
            if ((this.testOperationCompleted == null)) {
                this.testOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestOperationCompleted);
            }
            this.InvokeAsync("test", new object[] {
                        name}, this.testOperationCompleted, userState);
        }
        
        private void OntestOperationCompleted(object arg) {
            if ((this.testCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testCompleted(this, new testCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/GetJsonData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetJsonData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfanyTypeanyType", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para) {
            object[] results = this.Invoke("GetJsonData", new object[] {
                        sqlId,
                        para});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJsonDataAsync(string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para) {
            this.GetJsonDataAsync(sqlId, para, null);
        }
        
        /// <remarks/>
        public void GetJsonDataAsync(string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para, object userState) {
            if ((this.GetJsonDataOperationCompleted == null)) {
                this.GetJsonDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJsonDataOperationCompleted);
            }
            this.InvokeAsync("GetJsonData", new object[] {
                        sqlId,
                        para}, this.GetJsonDataOperationCompleted, userState);
        }
        
        private void OnGetJsonDataOperationCompleted(object arg) {
            if ((this.GetJsonDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJsonDataCompleted(this, new GetJsonDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/ExecuteSql", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteSql([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfanyTypeanyType", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para, out int ExecuteSqlResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecuteSqlResultSpecified) {
            object[] results = this.Invoke("ExecuteSql", new object[] {
                        sqlId,
                        para});
            ExecuteSqlResult = ((int)(results[0]));
            ExecuteSqlResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ExecuteSqlAsync(string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para) {
            this.ExecuteSqlAsync(sqlId, para, null);
        }
        
        /// <remarks/>
        public void ExecuteSqlAsync(string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para, object userState) {
            if ((this.ExecuteSqlOperationCompleted == null)) {
                this.ExecuteSqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSqlOperationCompleted);
            }
            this.InvokeAsync("ExecuteSql", new object[] {
                        sqlId,
                        para}, this.ExecuteSqlOperationCompleted, userState);
        }
        
        private void OnExecuteSqlOperationCompleted(object arg) {
            if ((this.ExecuteSqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSqlCompleted(this, new ExecuteSqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/GetDataByConfig", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetDataByConfig([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dbConfig, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfanyTypeanyType", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para) {
            object[] results = this.Invoke("GetDataByConfig", new object[] {
                        dbConfig,
                        sqlId,
                        para});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataByConfigAsync(string dbConfig, string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para) {
            this.GetDataByConfigAsync(dbConfig, sqlId, para, null);
        }
        
        /// <remarks/>
        public void GetDataByConfigAsync(string dbConfig, string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para, object userState) {
            if ((this.GetDataByConfigOperationCompleted == null)) {
                this.GetDataByConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataByConfigOperationCompleted);
            }
            this.InvokeAsync("GetDataByConfig", new object[] {
                        dbConfig,
                        sqlId,
                        para}, this.GetDataByConfigOperationCompleted, userState);
        }
        
        private void OnGetDataByConfigOperationCompleted(object arg) {
            if ((this.GetDataByConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataByConfigCompleted(this, new GetDataByConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/GetJsonDataByConfig", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetJsonDataByConfig([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dbConfig, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfanyTypeanyType", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para) {
            object[] results = this.Invoke("GetJsonDataByConfig", new object[] {
                        dbConfig,
                        sqlId,
                        para});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJsonDataByConfigAsync(string dbConfig, string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para) {
            this.GetJsonDataByConfigAsync(dbConfig, sqlId, para, null);
        }
        
        /// <remarks/>
        public void GetJsonDataByConfigAsync(string dbConfig, string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para, object userState) {
            if ((this.GetJsonDataByConfigOperationCompleted == null)) {
                this.GetJsonDataByConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJsonDataByConfigOperationCompleted);
            }
            this.InvokeAsync("GetJsonDataByConfig", new object[] {
                        dbConfig,
                        sqlId,
                        para}, this.GetJsonDataByConfigOperationCompleted, userState);
        }
        
        private void OnGetJsonDataByConfigOperationCompleted(object arg) {
            if ((this.GetJsonDataByConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJsonDataByConfigCompleted(this, new GetJsonDataByConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/ExecuteSqlByConfig", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteSqlByConfig([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dbConfig, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfanyTypeanyType", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para, out int ExecuteSqlByConfigResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecuteSqlByConfigResultSpecified) {
            object[] results = this.Invoke("ExecuteSqlByConfig", new object[] {
                        dbConfig,
                        sqlId,
                        para});
            ExecuteSqlByConfigResult = ((int)(results[0]));
            ExecuteSqlByConfigResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ExecuteSqlByConfigAsync(string dbConfig, string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para) {
            this.ExecuteSqlByConfigAsync(dbConfig, sqlId, para, null);
        }
        
        /// <remarks/>
        public void ExecuteSqlByConfigAsync(string dbConfig, string sqlId, ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType[] para, object userState) {
            if ((this.ExecuteSqlByConfigOperationCompleted == null)) {
                this.ExecuteSqlByConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSqlByConfigOperationCompleted);
            }
            this.InvokeAsync("ExecuteSqlByConfig", new object[] {
                        dbConfig,
                        sqlId,
                        para}, this.ExecuteSqlByConfigOperationCompleted, userState);
        }
        
        private void OnExecuteSqlByConfigOperationCompleted(object arg) {
            if ((this.ExecuteSqlByConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSqlByConfigCompleted(this, new ExecuteSqlByConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/SendSms", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SendSms([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string phones, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string message) {
            object[] results = this.Invoke("SendSms", new object[] {
                        phones,
                        message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsAsync(string phones, string message) {
            this.SendSmsAsync(phones, message, null);
        }
        
        /// <remarks/>
        public void SendSmsAsync(string phones, string message, object userState) {
            if ((this.SendSmsOperationCompleted == null)) {
                this.SendSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsOperationCompleted);
            }
            this.InvokeAsync("SendSms", new object[] {
                        phones,
                        message}, this.SendSmsOperationCompleted, userState);
        }
        
        private void OnSendSmsOperationCompleted(object arg) {
            if ((this.SendSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsCompleted(this, new SendSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/GetExcelData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetExcelData() {
            object[] results = this.Invoke("GetExcelData", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExcelDataAsync() {
            this.GetExcelDataAsync(null);
        }
        
        /// <remarks/>
        public void GetExcelDataAsync(object userState) {
            if ((this.GetExcelDataOperationCompleted == null)) {
                this.GetExcelDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExcelDataOperationCompleted);
            }
            this.InvokeAsync("GetExcelData", new object[0], this.GetExcelDataOperationCompleted, userState);
        }
        
        private void OnGetExcelDataOperationCompleted(object arg) {
            if ((this.GetExcelDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExcelDataCompleted(this, new GetExcelDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/UploadCmnetFromExcel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadCmnetFromExcel([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string operatureId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] fileContex, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strMsg, out int UploadCmnetFromExcelResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool UploadCmnetFromExcelResultSpecified) {
            object[] results = this.Invoke("UploadCmnetFromExcel", new object[] {
                        operatureId,
                        fileName,
                        fileContex,
                        strMsg});
            strMsg = ((string)(results[0]));
            UploadCmnetFromExcelResult = ((int)(results[1]));
            UploadCmnetFromExcelResultSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void UploadCmnetFromExcelAsync(string operatureId, string fileName, byte[] fileContex, string strMsg) {
            this.UploadCmnetFromExcelAsync(operatureId, fileName, fileContex, strMsg, null);
        }
        
        /// <remarks/>
        public void UploadCmnetFromExcelAsync(string operatureId, string fileName, byte[] fileContex, string strMsg, object userState) {
            if ((this.UploadCmnetFromExcelOperationCompleted == null)) {
                this.UploadCmnetFromExcelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCmnetFromExcelOperationCompleted);
            }
            this.InvokeAsync("UploadCmnetFromExcel", new object[] {
                        operatureId,
                        fileName,
                        fileContex,
                        strMsg}, this.UploadCmnetFromExcelOperationCompleted, userState);
        }
        
        private void OnUploadCmnetFromExcelOperationCompleted(object arg) {
            if ((this.UploadCmnetFromExcelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCmnetFromExcelCompleted(this, new UploadCmnetFromExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataService/UploadFileAndUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UploadFileAndUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string operatureId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] FileByte, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string path, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sheet, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dbconfig) {
            object[] results = this.Invoke("UploadFileAndUpdate", new object[] {
                        operatureId,
                        FileByte,
                        path,
                        sheet,
                        dbconfig});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAndUpdateAsync(string operatureId, byte[] FileByte, string path, string sheet, string dbconfig) {
            this.UploadFileAndUpdateAsync(operatureId, FileByte, path, sheet, dbconfig, null);
        }
        
        /// <remarks/>
        public void UploadFileAndUpdateAsync(string operatureId, byte[] FileByte, string path, string sheet, string dbconfig, object userState) {
            if ((this.UploadFileAndUpdateOperationCompleted == null)) {
                this.UploadFileAndUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileAndUpdateOperationCompleted);
            }
            this.InvokeAsync("UploadFileAndUpdate", new object[] {
                        operatureId,
                        FileByte,
                        path,
                        sheet,
                        dbconfig}, this.UploadFileAndUpdateOperationCompleted, userState);
        }
        
        private void OnUploadFileAndUpdateOperationCompleted(object arg) {
            if ((this.UploadFileAndUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileAndUpdateCompleted(this, new UploadFileAndUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
    public partial class ArrayOfKeyValueOfanyTypeanyTypeKeyValueOfanyTypeanyType {
        
        private object keyField;
        
        private object valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void testCompletedEventHandler(object sender, testCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class testCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal testCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetJsonDataCompletedEventHandler(object sender, GetJsonDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJsonDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJsonDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ExecuteSqlCompletedEventHandler(object sender, ExecuteSqlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteSqlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteSqlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int ExecuteSqlResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ExecuteSqlResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDataByConfigCompletedEventHandler(object sender, GetDataByConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataByConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataByConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetJsonDataByConfigCompletedEventHandler(object sender, GetJsonDataByConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJsonDataByConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJsonDataByConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ExecuteSqlByConfigCompletedEventHandler(object sender, ExecuteSqlByConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteSqlByConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteSqlByConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int ExecuteSqlByConfigResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ExecuteSqlByConfigResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SendSmsCompletedEventHandler(object sender, SendSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetExcelDataCompletedEventHandler(object sender, GetExcelDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExcelDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExcelDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadCmnetFromExcelCompletedEventHandler(object sender, UploadCmnetFromExcelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCmnetFromExcelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadCmnetFromExcelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string strMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int UploadCmnetFromExcelResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool UploadCmnetFromExcelResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadFileAndUpdateCompletedEventHandler(object sender, UploadFileAndUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileAndUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileAndUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591